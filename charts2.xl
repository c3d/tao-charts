// ****************************************************************************
//  charts2.xl                                                      Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement charts mechanism
//
//
//
//
//
//
//
//
// ****************************************************************************
// This software is property of Taodyne SAS - Confidential
// Ce logiciel est la propriété de Taodyne SAS - Confidentiel
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

import Slides

// Define the default theme
import "default-theme.xl"


// ============================================================================
//
//                              Charts data count
//
// ============================================================================

// Maximum number of data (between all sets)
CHART_DATA_COUNT -> 0
CHART_DATA_COUNT := 0

chart_max_count ->
// ----------------------------------------------------------------------------
//   Return the max count between datasets
// ----------------------------------------------------------------------------
    CHART_DATA_COUNT

// Array containing data count per dataset
data chart_data_count

// Useful function to get correct data count
chart_count N:integer ->
// ----------------------------------------------------------------------------
//   Return data count in the given dataset
// ----------------------------------------------------------------------------
    chart_get_integer(chart_data_count[N])


// Total number of used datasets
CHART_DATASETS_COUNT -> 0

chart_datasets_count ->
// ----------------------------------------------------------------------------
//   Return total number of filled datasets
// ----------------------------------------------------------------------------
    CHART_DATASETS_COUNT


// ============================================================================
//
//                              Charts data
//
// ============================================================================

// Maximum number of datasets
CHART_DATASETS_MAX -> 4
CHART_DATASETS_MAX := 4

// Charts datasets
data chart_dataset1
data chart_dataset2
data chart_dataset3
data chart_dataset4

// Useful shortcut functions to get a dataset
chart_dataset 1 -> chart_dataset1
chart_dataset 2 -> chart_dataset2
chart_dataset 3 -> chart_dataset3
chart_dataset 4 -> chart_dataset4
chart_dataset Other -> false


// Shortcut to push a real into a dataset S
chart_push_data S:integer, D:real -> chart_push_data2 S, D

chart_push_data2 S:integer, D ->
// ----------------------------------------------------------------------------
//   Push data D into the given dataset S
// ----------------------------------------------------------------------------
    N := S // Don't know why but needed to use array (XL BUG?)
    if(N > 0 and N < 5) then
        L := chart_count N

        // Push data in the given dataset
        if(N = 1) then
            chart_dataset1[L] := D
        else if(N = 2) then
            chart_dataset2[L] := D
        else if(N = 3) then
            chart_dataset3[L] := D
        else if(N = 4) then
            chart_dataset4[L] := D

        // Update dataset count if newly used
        if(L = 0) then
            CHART_DATASETS_COUNT := CHART_DATASETS_COUNT + 1

        // Update global data count if necessary
        if(L >= CHART_DATA_COUNT) then
            CHART_DATA_COUNT := L + 1

        // Update data count for the given dataset
        chart_data_count[N] := L + 1

        // Now we have pushed data, need init charts
        CHART_NEED_INIT := 1


chart_data S:integer, I:integer ->
// ----------------------------------------------------------------------------
//   Get data at the given index I in the dataset S
// ----------------------------------------------------------------------------
    (chart_dataset S)[I]


// ============================================================================
//
//                              Load from file
//
// ============================================================================

// ----------------------------------------------------------------------------
//   REALS ONLY
// ----------------------------------------------------------------------------
chart_add_data A:real ->
    chart_push_data 1, A

chart_add_data A:real, B:real ->
    chart_push_data 1, A
    chart_push_data 2, B

chart_add_data A:real, B:real, C:real ->
    chart_push_data 1, A
    chart_push_data 2, B
    chart_push_data 3, C

chart_add_data A:real, B:real, C:real, D:real ->
    chart_push_data 1, A
    chart_push_data 2, B
    chart_push_data 3, C
    chart_push_data 4, D


// ----------------------------------------------------------------------------
//   TEXTS ONLY : NEED FIX #3249 TO WORK CORRECTLY
// ----------------------------------------------------------------------------

chart_add_data Other -> false


chart_load_csv T:text ->
// ----------------------------------------------------------------------------
//   Load data from a csv file
// ----------------------------------------------------------------------------
    chart_reset
    load_csv T, "chart_add_data"


chart_load_tsv T:text ->
// ----------------------------------------------------------------------------
//   Load data from a tsv file
// ----------------------------------------------------------------------------
    chart_reset
    load_tsv T, "chart_add_data"


// ============================================================================
//
//                            Pie Chart
//
// ============================================================================

chart_init "pie", Style:text ->
// ----------------------------------------------------------------------------
//   Initialize pie chart
// ----------------------------------------------------------------------------
    // Compute sum for pie chart
    if(CHART_NEED_INIT = 1) then
        chart_max["pie"] := chart_sum CHART_DATASET


chart "pie", X:real, Y:real, W:real, H:real ->
// ----------------------------------------------------------------------------
//   Draw only first dataset if no set are specified
// ----------------------------------------------------------------------------
    chart 1, "pie", X, Y, W, H

// ============================================================================
//
//                            Default Chart
//
// ============================================================================

CHART_DATASET -> 1

// Range of charts set
data chart_first_set
data chart_last_set

chart_master -> ""

chart N:integer, Master:text, X:real, Y:real, W:real, H:real ->
// ----------------------------------------------------------------------------
//   Compute a chart with given set
// ----------------------------------------------------------------------------
    M := Master // XL BUG

    // Save previous count
    T -> 1
    T := CHART_DATASETS_COUNT
    CHART_DATASETS_COUNT := 1

    // If set has changed, then force init
    if(CHART_DATASET <> N) then
        CHART_NEED_INIT := 1
        CHART_DATASET := N

    // Set range of sets
    chart_first_set[M] := N
    chart_last_set[M]  := N

    // Draw chart
    chart_master Master, chart_style, chart_format, X, Y, W, H

    // Restore count
    CHART_DATASETS_COUNT := T


chart Master:text, X:real, Y:real, W:real, H:real ->
// ----------------------------------------------------------------------------
//   Compute a chart with all sets
// ----------------------------------------------------------------------------
    // Set range of sets
    M := Master
    chart_first_set[M] := 1
    chart_last_set[M]  := chart_datasets_count

    chart_master Master, chart_style, chart_format, X, Y, W, H


chart_master Master:text, Style:text, Format:text, X:real, Y:real, W:real, H:real ->
// ----------------------------------------------------------------------------
//   Compute a chart
// ----------------------------------------------------------------------------
    locally
        translate X, Y, 0.0
        scale W, H, 1.0

        // Master has changed, then force init
        if(chart_master <> Master) then
            chart_master := Master

        chart_draw_legend // Draw legend
        chart_draw_title  // Draw title
        chart_draw_xlabel
        chart_draw_ylabel

        // Init chart
        chart_init Master, Style

        theme_chart_layout theme, Master, Style, Format

chart_max_data -> 0.0

chart X:real, Y:real, W:real, H:real, Style:text, Format:text ->
// ----------------------------------------------------------------------------
//   Draw current chart
// ----------------------------------------------------------------------------
    if(CHART_DATA_COUNT > 0) then
        contents 0,
            translate X, Y, 0.0

            Start     := chart_first_set[chart_master] // Get first set to draw
            End       := chart_last_set[chart_master]  // Get last set to draw
            chart_max_data := chart_max[chart_master]  // Get the maximum data

            for N in Start..End loop
                if((chart_count N) > 0) then
                    for I in 0..(chart_data_count[N] - 1) loop
                        theme_chart theme, chart_master, Style, Format, W, H, N, I


// Charts need init or not
CHART_NEED_INIT -> 1

chart_init Master:text, Style:text ->
// ----------------------------------------------------------------------------
//   Initialize charts and variables
// ----------------------------------------------------------------------------
    M := Master // XL BUG

    // Init only if needed
    if(CHART_NEED_INIT = 1) then

        // Init maximum
        chart_max[M] := 0.0
        Start := chart_first_set[chart_master] // Get first set to draw
        End   := chart_last_set[chart_master]  // Get last set to draw

        // Get max value in all datasets
        for n in Start..End loop
            if((chart_count n) > 0) then
                Max := 0.0
                for d in 0..(chart_data_count[n] - 1) loop
                    Max := chart_max (Max, (chart_data (n, d)))

                chart_compute_max Style, Max

        // Compute ticks and labels
        chart_autocompute_ticks
        chart_autocompute_ticks_labels

        // Init done
        CHART_NEED_INIT := 0


// ============================================================================
//
//                          Chart style
//
// ============================================================================

chart_style -> ""
chart_style := ""
chart_style T:text -> chart_style := T

// ============================================================================
//
//                          Chart format
//
// ============================================================================

chart_format -> ""
chart_format := ""
chart_format T:text -> chart_format := T

// ============================================================================
//
//                          Chart title
//
// ============================================================================

chart_title -> ""
chart_title T:text -> chart_title := T

chart_draw_title ->
// ----------------------------------------------------------------------------
//   Draw a title of a regular chart
// ----------------------------------------------------------------------------
    if(chart_title <> "") then
        slide_flow["chart_title"] := true
        theme_chart_title theme, chart_master, chart_style,
            text chart_title


// ============================================================================
//
//                          Chart legends
//
// ============================================================================

chart_legends_count -> 0
data chart_legends

chart_draw_legend ->
// ----------------------------------------------------------------------------
//   Draw legend of a regular chart
// ----------------------------------------------------------------------------
    if(chart_legends_count > 0) then
        slide_flow["chart_legend"] := true
        theme_chart_legend theme, chart_master, chart_style,
            for N in 1..chart_legends_count loop
                theme_chart_entry theme, chart_master, chart_style, N,
                    text chart_legends[N]


chart_legend Body ->
// ----------------------------------------------------------------------------
//   Compute legend of a regular chart
// ----------------------------------------------------------------------------
    chart_legends_count := 0
    locally Body


chart_entry Text:text ->
// ----------------------------------------------------------------------------
//   Add entry to legend
// ----------------------------------------------------------------------------
    chart_legends_count := chart_legends_count + 1
    chart_legends[chart_legends_count] := Text


// ============================================================================
//
//                          Chart axis label
//
// ============================================================================

chart_xlabel -> "x-axis"
chart_xlabel := "x-axis"

chart_xlabel T:text -> chart_xlabel := T

chart_draw_xlabel ->
// ----------------------------------------------------------------------------
//   Draw a x label of a regular chart
// ----------------------------------------------------------------------------
    if(chart_xlabel <> "") then
        slide_flow["chart_xlabel"] := true
        theme_chart_xlabel theme, chart_master, chart_style,
            text chart_xlabel


chart_ylabel -> "y-axis"
chart_ylabel := "y-axis"

chart_ylabel T:text -> chart_ylabel := T

chart_draw_ylabel ->
// ----------------------------------------------------------------------------
//   Draw a y label of a regular chart
// ----------------------------------------------------------------------------
    if(chart_ylabel <> "") then
        slide_flow["chart_ylabel"] := true
        theme_chart_ylabel theme, chart_master, chart_style,
            text chart_ylabel


// ============================================================================
//
//                          Chart axis
//
// ============================================================================

chart_xaxis X:real, Y:real, W:real, H:real, Style:text, Format:text ->
// ----------------------------------------------------------------------------
//   Draw a x axis of a regular chart
// ----------------------------------------------------------------------------
    theme_chart_xaxis theme, chart_master, Style, Format, X, Y, W, H


chart_yaxis X:real, Y:real, W:real, H:real, Style:text, Format:text ->
// ----------------------------------------------------------------------------
//   Draw a y axis of a regular chart
// ----------------------------------------------------------------------------
    theme_chart_yaxis theme, chart_master, Style, Format, X, Y, W, H


// ============================================================================
//
//                          Chart ticks
//
// ============================================================================

// Maximum ticks in charts
CHART_MAX_TICKS -> 10
CHART_MAX_TICKS := 10

// Number of ticks in x and y axis
CHART_TICKS_X -> 1
CHART_TICKS_X := 1

CHART_TICKS_Y -> 1
CHART_TICKS_Y := 1

// Autocompute ticks number or not
CHART_AUTO_TICKS_X -> 1
CHART_AUTO_TICKS_X := 1

CHART_AUTO_TICKS_Y -> 1
CHART_AUTO_TICKS_Y := 1


chart_xticks N:integer ->
// ----------------------------------------------------------------------------
//   Set ticks number for x-axis
// ----------------------------------------------------------------------------
    CHART_TICKS_X := N
    CHART_AUTO_TICKS_X := 0        // Disable autocomputation of x-ticks number
    chart_autocompute_ticks_labels // Recompute associate labels


chart_xticks ->
// ----------------------------------------------------------------------------
//   Return ticks number for x-axis
// ----------------------------------------------------------------------------
    CHART_TICKS_X


chart_yticks N:integer ->
// ----------------------------------------------------------------------------
//   Set ticks number for y-axis
// ----------------------------------------------------------------------------
    CHART_TICKS_Y := N
    CHART_AUTO_TICKS_Y := 0        // Disable autocomputation of y-ticks number
    chart_autocompute_ticks_labels // Recompute associate labels


chart_yticks ->
// ----------------------------------------------------------------------------
//   Return ticks number for y-axis
// ----------------------------------------------------------------------------
    CHART_TICKS_Y


chart_autocompute_ticks ->
// ----------------------------------------------------------------------------
//   Compute automatically nice ticks for charts (minimum ticks number)
// ----------------------------------------------------------------------------
    // Compute y-ticks number
    if(CHART_AUTO_TICKS_Y <> 0) then
        CHART_MAX := chart_max[chart_master]
        CHART_MIN := 0.0

        CHART_RANGE   := chart_compute_fraction ((CHART_MAX - CHART_MIN), false)
        CHART_TICKS   := chart_compute_fraction ((CHART_RANGE / CHART_MAX_TICKS), true)
        CHART_MAX     := (ceil(CHART_MAX / CHART_TICKS)) * CHART_TICKS
        CHART_TICKS_Y := integer CHART_MAX / CHART_TICKS

        // Update new max
        chart_max[chart_master] := CHART_MAX

    // Compute x-ticks number
    if(CHART_AUTO_TICKS_X <> 0) then
        CHART_TICKS_X := (CHART_DATA_COUNT - 1)


// ============================================================================
//
//                          Chart ticks label
//
// ============================================================================

// Autocompute ticks label or not
CHART_AUTO_XTICKS_LABEL -> 1
CHART_AUTO_XTICKS_LABEL := 1
CHART_AUTO_YTICKS_LABEL -> 1
CHART_AUTO_YTICKS_LABEL := 1

// Arrays containing ticks labels
data chart_xticks_labels
data chart_yticks_labels

// Ticks labels count
chart_xticks_labels_count -> 0
chart_xticks_labels_count := 0
chart_yticks_labels_count -> 0
chart_yticks_labels_count := 0


chart_autocompute_ticks_labels ->
// ----------------------------------------------------------------------------
//   Autocompute ticks labels
// ----------------------------------------------------------------------------
    if(CHART_AUTO_XTICKS_LABEL = 1) then
        // Set x-ticks labels
        for d in 0..CHART_TICKS_X loop
            chart_xticks_labels[d] := text (d + 1)

        // Update count
        chart_xticks_labels_count := CHART_TICKS_X

    if(CHART_AUTO_YTICKS_LABEL = 1) then
        CHART_MAX := chart_max[chart_master]
        for s in 0..CHART_TICKS_Y loop
            chart_yticks_labels[s] := text ((CHART_MAX / CHART_TICKS_Y) * s)

        // Update count
        chart_yticks_labels_count := CHART_TICKS_Y


chart_xticks_labels L ->
// ----------------------------------------------------------------------------
//   Set xticks labels
// ----------------------------------------------------------------------------
    S := (size L)

    // Set given labels to the corresponding array
    for d in 0 .. S loop
        Label := chart_get_text (L at (d + 1))
        chart_xticks_labels [d] := Label

    chart_xticks_labels_count := S

    // Disable autogeneration of ticks labels
    CHART_AUTO_XTICKS_LABEL := 0


chart_yticks_labels L ->
// ----------------------------------------------------------------------------
//   Set yticks labels
// ----------------------------------------------------------------------------
    S := (size L)

    for d in 0..S loop
        Label := chart_get_text (L at (d + 1))
        chart_yticks_labels [d] := Label

    chart_yticks_labels_count := S

    // Disable autogeneration of ticks labels
    CHART_AUTO_YTICKS_LABEL := 0


chart_xticks_label N:integer ->
// ----------------------------------------------------------------------------
//   Get x-ticks label at index N
// ----------------------------------------------------------------------------
    if(N <= chart_xticks_labels_count) then
        chart_xticks_labels[N]
    else
        ""


chart_yticks_label N:integer ->
// ----------------------------------------------------------------------------
//   Get y-ticks label at index N
// ----------------------------------------------------------------------------
    if(N <= chart_yticks_labels_count) then
        chart_get_text (chart_yticks_labels[N])
    else
        ""

// ============================================================================
//
//                     Minimum and maximum computation
//
// ============================================================================

data chart_max

// Compute max for stacked charts
chart_compute_max "vertical_stacked", M:real   -> chart_compute_max "stacked", M
chart_compute_max "horizontal_stacked", M:real   -> chart_compute_max "stacked", M
chart_compute_max "stacked", M:real   ->
// ----------------------------------------------------------------------------
//   Compute max for stacked charts
// ----------------------------------------------------------------------------
    chart_max[chart_master] := (chart_max[chart_master]) + M // We sum maximum values


chart_compute_max Style:text, M:real ->
// ----------------------------------------------------------------------------
//   Compute max for regular charts
// ----------------------------------------------------------------------------
    chart_max[chart_master] := chart_max M, (chart_max[chart_master]) // We keep the maximum value


chart_max A:real, B:real ->
// ----------------------------------------------------------------------------
//   Simple function to return max between two values
// ----------------------------------------------------------------------------
    if(A < B) then
        B
    else
        A


// ============================================================================
//
//                          Chart general functions
//
// ============================================================================

chart_reset->
// ----------------------------------------------------------------------------
//   Reset all datasets
// ----------------------------------------------------------------------------
    for I in 1..CHART_DATASETS_MAX loop
        chart_data_count[I] := 0
    CHART_DATA_COUNT := 0
    CHART_DATASETS_COUNT := 0
    chart_legends_count := 0

chart_sum N:integer ->
// ----------------------------------------------------------------------------
//   Compute data sum of dataset N
// ----------------------------------------------------------------------------
    if(chart_data_count[N] > 0) then
        CHART_SUM := 0.0
        for d in 0..(chart_data_count[N] - 1) loop
            CHART_SUM := CHART_SUM + chart_data (N, d)

        CHART_SUM
    else
        0


chart_compute_fraction Range:real, Round:boolean ->
// ----------------------------------------------------------------------------
//   A short function to compute nice fractions for a chart
//   see http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks/16363437#16363437
// ----------------------------------------------------------------------------
    exponent -> 0 // exponent of range
    fraction -> 0.0 // fractional part of range

    if(Range > 0.0) then
        exponent := integer floor (log10 (Range))
    else
        exponent := 1
    fraction := Range / (10 ^ exponent)

    // Compute nice, rounded fraction
    if (Round) then
        if (fraction < 1.5) then
            fraction := 1
        else if (fraction < 3) then
            fraction := 2
        else if (fraction < 7) then
            fraction := 5
        else
            fraction := 10
    else
        if (fraction <= 1) then
            fraction := 1
        else if (fraction <= 2) then
            fraction := 2
        else if (fraction <= 5) then
            fraction := 5
        else
            fraction := 10

    fraction * (10 ^ exponent)


// Useful functions to get correct values in array
chart_get_integer N:integer -> N
chart_get_integer Other -> 0

chart_get_text L:real -> text L
chart_get_text L:text -> L
chart_get_text Other -> ""
