// *****************************************************************************
// charts.tbl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "Charts" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2013-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2013-2014, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************


// ============================================================================
//
//   Data
//
// ============================================================================

PREFIX(ChartPush,  tree, "chart_push_data",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(data, real, ),
       return ChartFactory::chart_push_data(name, set, data),
       GROUP(module.Charts)
       SYNOPSIS("Push a data in a set")
       DESCRIPTION("Push a data in a set"))

PREFIX(ChartData,  tree, "chart_data",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(index, integer, ),
       return ChartFactory::chart_data(name, set, index),
       GROUP(module.Charts)
       SYNOPSIS("Return a data of a chart")
       DESCRIPTION("Return a data of a chart"))

PREFIX(ChartDataRatio,  tree, "chart_data_ratio",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(index, integer, ),
       return ChartFactory::chart_data_ratio(name, set, index),
       GROUP(module.Charts)
       SYNOPSIS("Return ratio for a data of a chart")
       DESCRIPTION("Return ratio for a data of a chart"))

PREFIX(ChartSum,  tree,  "chart_sum",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(abs, boolean, ),
       return ChartFactory::chart_sum(name, set, abs),
       GROUP(module.Charts)
       SYNOPSIS("Sum data in a dataset")
       DESCRIPTION("Sum data in a dataset"))

PREFIX(ChartMax,  tree,  "chart_max",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, ),
       return ChartFactory::chart_max(name, set),
       GROUP(module.Charts)
       SYNOPSIS("Return maximum data of a dataset")
       DESCRIPTION("Return maximum data of a dataset"))

PREFIX(ChartMin,  tree,  "chart_min",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, ),
       return ChartFactory::chart_min(name, set),
       GROUP(module.Charts)
       SYNOPSIS("Return minimum data of a dataset")
       DESCRIPTION("Return minimum data of a dataset"))

PREFIX(ChartMaxCount,  tree, "chart_max_count",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_max_count(name),
       GROUP(module.Charts)
       SYNOPSIS("Return max data count")
       DESCRIPTION("Return max data count"))

PREFIX(ChartDatasetsCount,  tree, "chart_datasets_count",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_datasets_count(name),
       GROUP(module.Charts)
       SYNOPSIS("Return count of datasets to draw")
       DESCRIPTION("Return count of datasets to draw"))

PREFIX(ChartResetDatasets,  tree, "chart_reset_datasets",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_reset_datasets(name),
       GROUP(module.Charts)
       SYNOPSIS("Reset count of datasets to draw")
       DESCRIPTION("Reset count of datasets to draw"))

PREFIX(ChartPushDataset,  tree, "chart_push_dataset",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, "dataset to pushed"),
       return ChartFactory::chart_push_dataset(name, set),
       GROUP(module.Charts)
       SYNOPSIS("Push a datasets to the list to draw")
       DESCRIPTION("Push a datasets to the list to draw"))

PREFIX(ChartGetDataset,  tree, "chart_dataset",
       PARM(name, text, "The name of the chart")
       PARM(index, integer, "index of dataset"),
       return ChartFactory::chart_dataset(name, index),
       GROUP(module.Charts)
       SYNOPSIS("Return a datasets according to its index")
       DESCRIPTION("Return a datasets according to its index"))

PREFIX(ChartCount,  tree, "chart_count",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, ),
       return ChartFactory::chart_count(name, set),
       GROUP(module.Charts)
       SYNOPSIS("Return size of a dataset")
       DESCRIPTION("Return size of a dataset"))

PREFIX(ChartDataProperty,  tree, "chart_data_property",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(index, integer, )
       PARM(property, text, ),
       return ChartFactory::chart_data_property(name, set, index, property),
       GROUP(module.Charts)
       SYNOPSIS("Return a data property of a chart")
       DESCRIPTION("Return a data property of a chart"))

PREFIX(ChartDataSetProperty,  tree, "chart_data_set_property",
       PARM(name, text, "The name of the chart")
       PARM(set, integer, )
       PARM(index, integer, )
       PARM(property, text, )
       PARM(value, real, ),
       return ChartFactory::chart_data_set_property(name, set, index, property, value),
       GROUP(module.Charts)
       SYNOPSIS("Set a data property of a chart")
       DESCRIPTION("Set a data property of a chart"))



// ============================================================================
//
//   Chart mechanism
//
// ============================================================================

PREFIX(ChartReset,  tree, "chart_reset",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_reset(name),
       GROUP(module.Charts)
       SYNOPSIS("Reset data of a chart")
       DESCRIPTION("Reset data of a chart"))

PREFIX(ChartOnly,  tree, "chart_only",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_only(name),
       SYNOPSIS("Purge all other charts from memory")
       DESCRIPTION("Purge all other charts from memory"))

PREFIX(ChartDrop,  tree, "chart_drop",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_drop(name),
       SYNOPSIS("Purge the given chart from memory")
       DESCRIPTION("Purge the given chart from memory"))

PREFIX(ChartCurrent,  tree, "chart_current",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_current(name),
       SYNOPSIS("Set chart with given name as current")
       DESCRIPTION("Set chart with given name as current"))

PREFIX(ChartCreate,  tree, "chart_create",
       PARM(name, text, "The name of the chart")
       PARM(p, code, "The program to init chart"),
       return ChartFactory::chart_create(context, name, p),
       GROUP(module.Charts)
       SYNOPSIS("Create a chart")
       DESCRIPTION("Create a chart"))

PREFIX(ChartName,  tree, "chart_name",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_name(name),
       SYNOPSIS("Return current chart name")
       DESCRIPTION("Return current chart name"))

PREFIX(ChartType,  tree, "chart_type",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_type(name),
       SYNOPSIS("Return type of a chart")
       DESCRIPTION("Return type of a chart"))

PREFIX(ChartSetType,  tree, "chart_set_type",
       PARM(name, text, "The name of the chart")
       PARM(type, text, "The type of the chart"),
       return ChartFactory::chart_type(name, type),
       SYNOPSIS("Set type of a chart")
       DESCRIPTION("Set type of a chart"))

PREFIX(ChartStyle,  tree, "chart_style",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_style(name),
       SYNOPSIS("Return style of a chart")
       DESCRIPTION("Return style of a chart"))

PREFIX(ChartStyle2,  tree, "chart_set_style",
       PARM(name, text, "The name of the chart")
       PARM(style, text, "The style of the chart"),
       return ChartFactory::chart_style(name, style),
       SYNOPSIS("Change style of chart")
       DESCRIPTION("Change style of chart"))

PREFIX(ChartFormat,  tree, "chart_format",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_format(name),
       SYNOPSIS("Return format of a chart")
       DESCRIPTION("Return format of a chart"))

PREFIX(ChartFormat2,  tree, "chart_set_format",
       PARM(name, text, "The name of the chart")
       PARM(format, text, "The format of the chart"),
       return ChartFactory::chart_format(name, format),
       SYNOPSIS("Change format of a chart")
       DESCRIPTION("Change format of a chart"))

PREFIX(ChartFirst,  tree, "chart_first",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_first(name),
       GROUP(module.Charts)
       SYNOPSIS("Return first dataset of the chart")
       DESCRIPTION("Return first dataset of the chart"))

PREFIX(ChartLast,  tree, "chart_last",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_last(name),
       GROUP(module.Charts)
       SYNOPSIS("Return last dataset of the chart")
       DESCRIPTION("Return last dataset of the chart"))


// ============================================================================
//
//   Chart Title
//
// ============================================================================


PREFIX(ChartTitle,  tree, "chart_title",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_title(name),
       GROUP(module.Charts)
       SYNOPSIS("Return title of a chart")
       DESCRIPTION("Return title of a chart"))

PREFIX(ChartSetTitle,  tree, "chart_set_title",
       PARM(name, text, "The name of the chart")
       PARM(title, text, "The title of the chart"),
       return ChartFactory::chart_title(name, title),
       GROUP(module.Charts)
       SYNOPSIS("Set title of a chart")
       DESCRIPTION("Set title of a chart"))


// ============================================================================
//
//   Chart Legend
//
// ============================================================================

PREFIX(ChartLegend,  tree, "chart_legend",
       PARM(name, text, "The name of the chart")
       PARM(index, integer, "Entry number"),
       return ChartFactory::chart_legend(name, index),
       GROUP(module.Charts)
       SYNOPSIS("Return a legend of a chart")
       DESCRIPTION("Return a legend of a chart"))

PREFIX(ChartSetLegend,  tree, "chart_set_legend",
       PARM(name, text, "The name of the chart")
       PARM(index, integer, "Entry number")
       PARM(entry, text, "The entry of the legend"),
       return ChartFactory::chart_legend(name, index, entry),
       GROUP(module.Charts)
       SYNOPSIS("Set a legend of a chart")
       DESCRIPTION("Set a legend of a chart"))


// ============================================================================
//
//   Chart Axis labels
//
// ============================================================================


PREFIX(ChartXLabel,  tree, "chart_xlabel",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_xlabel(name),
       GROUP(module.Charts)
       SYNOPSIS("Return x-label of a chart")
       DESCRIPTION("Return x-label of a chart"))

PREFIX(ChartSetXLabel,  tree, "chart_set_xlabel",
       PARM(name, text, "The name of the chart")
       PARM(label, text, "The label of x-axis"),
       return ChartFactory::chart_xlabel(name, label),
       GROUP(module.Charts)
       SYNOPSIS("Set x-label of a chart")
       DESCRIPTION("Set x-label of a chart"))

PREFIX(ChartYLabel,  tree, "chart_ylabel",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_ylabel(name),
       GROUP(module.Charts)
       SYNOPSIS("Return y-label of a chart")
       DESCRIPTION("Return y-label of a chart"))

PREFIX(ChartSetYLabel,  tree, "chart_set_ylabel",
       PARM(name, text, "The name of the chart")
       PARM(label, text, "The label of y-axis"),
       return ChartFactory::chart_ylabel(name, label),
       GROUP(module.Charts)
       SYNOPSIS("Set y-label of a chart")
       DESCRIPTION("Set y-label of a chart"))



// ============================================================================
//
//   Chart Axis
//
// ============================================================================

PREFIX(ChartMaxAxis,  tree, "chart_max_axis",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_max_axis(name),
       GROUP(module.Charts)
       SYNOPSIS("Return maximum value on the axis")
       DESCRIPTION("Return maximum value on the axis"))

PREFIX(ChartSetMaxAxis,  tree, "chart_set_max_axis",
       PARM(name, text, "The name of the chart")
       PARM(max, real, )
       PARM(adjust, boolean, ),
       return ChartFactory::chart_max_axis(name, max, adjust),
       GROUP(module.Charts)
       SYNOPSIS("Set maximum value on the axis")
       DESCRIPTION("Set maximum value on the axis"))

PREFIX(ChartMinAxis,  tree, "chart_min_axis",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_min_axis(name),
       GROUP(module.Charts)
       SYNOPSIS("Return minimum value on the axis")
       DESCRIPTION("Return minimum value on the axis"))

PREFIX(ChartSetMinAxis,  tree, "chart_set_min_axis",
       PARM(name, text, "The name of the chart")
       PARM(min, real, )
       PARM(adjust, boolean, ),
       return ChartFactory::chart_min_axis(name, min, adjust),
       GROUP(module.Charts)
       SYNOPSIS("Set minimum value on the axis")
       DESCRIPTION("Set minimum value on the axis"))

PREFIX(ChartXTicks,  tree, "chart_xticks",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_xticks(name),
       GROUP(module.Charts)
       SYNOPSIS("Return ticks number for x-axis")
       DESCRIPTION("Return ticks number for x-axis"))

PREFIX(ChartSetXTicks,  tree, "chart_set_xticks",
       PARM(name, text, "The name of the chart")
       PARM(ticks, real, ),
       return ChartFactory::chart_xticks(name, ticks),
       GROUP(module.Charts)
       SYNOPSIS("Set ticks number for x-axis")
       DESCRIPTION("Set ticks number for x-axis"))

PREFIX(ChartYTicks,  tree, "chart_yticks",
       PARM(name, text, "The name of the chart"),
       return ChartFactory::chart_yticks(name),
       GROUP(module.Charts)
       SYNOPSIS("Return ticks number for y-axis")
       DESCRIPTION("Return ticks number for y-axis"))

PREFIX(ChartSetYTicks,  tree, "chart_set_yticks",
       PARM(name, text, "The name of the chart")
       PARM(ticks, real, ),
       return ChartFactory::chart_yticks(name, ticks),
       GROUP(module.Charts)
       SYNOPSIS("Set ticks number for y-axis")
       DESCRIPTION("Set ticks number for y-axis"))


// ============================================================================
//
//   Chart ticks labels
//
// ============================================================================

PREFIX(ChartXTicksLabel,  tree, "chart_xticks_label",
       PARM(name, text, "The name of the chart")
       PARM(n, integer, ),
       return ChartFactory::chart_xticks_label(name, n),
       GROUP(module.Charts)
       SYNOPSIS("Return ticks label for x-axis")
       DESCRIPTION("Return ticks label for x-axis"))

PREFIX(ChartSetXTicksLabel,  tree, "chart_set_xticks_label",
       PARM(name, text, "The name of the chart")
       PARM(n, integer, )
       PARM(label, text, ),
       return ChartFactory::chart_xticks_label(name, n, label),
       GROUP(module.Charts)
       SYNOPSIS("Return ticks label for y-axis")
       DESCRIPTION("Return ticks label for y-axis"))

PREFIX(ChartYTicksLabel,  tree, "chart_yticks_label",
       PARM(name, text, "The name of the chart")
       PARM(n, integer, ),
       return ChartFactory::chart_yticks_label(name, n),
       GROUP(module.Charts)
       SYNOPSIS("Set ticks label for x-axis")
       DESCRIPTION("Set ticks label for x-axis"))

PREFIX(ChartSetYTicksLabel,  tree, "chart_set_yticks_label",
       PARM(name, text, "The name of the chart")
       PARM(n, integer, )
       PARM(label, text, ),
       return ChartFactory::chart_yticks_label(name, n, label),
       GROUP(module.Charts)
       SYNOPSIS("Set ticks label for y-axis")
       DESCRIPTION("Set ticks label for y-axis"))
